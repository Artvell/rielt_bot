# -*- coding: utf8 -*-
import telebot
from config import *
from database import *
from keyboards import *
import calendar as cal
from time import sleep
""
bot = telebot.TeleBot(token)
filt={} #id:[filters]
districts=["–ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π","–ú–∏—Ä–∑–æ –£–ª—É–≥–±–µ–∫—Å–∫–∏–π","–û–ª–º–∞–∑–∞—Ä—Å–∫–∏–π","–°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π","–£—á—Ç–µ–ø–∏–Ω—Å–∫–∏–π","–ß–∏–ª–∞–Ω–∑–∞—Ä—Å–∫–∏–π","–®–∞–π—Ö–∞–Ω—Ç–æ—Ö—É—Ä—Å–∫–∏–π","–Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π","–Ø—à–Ω–∞–±–∞–¥—Å–∫–∏–π","–Ø–∫–∫–∞—Å–∞—Ä–∞–π—Å–∫–∏–π"]
rooms={"1‚É£-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ":1,"2‚É£-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ":2,"3‚É£-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ":3,"4‚É£-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ":4,"5‚É£-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ":5}
res={} #id:[[],[],[]]
n={} #id:number
calend_info={}
kv_id={}
indic={}
pos={} #id:number
fsm={} #id:number
isn={}
name_writing={}
u_name={}
u_phone={}
u_status={}
u_distr={}
u_day={}
dop={}
files={}

def con(l):
    c=''
    for b in l:
        c+=str(b)+','
    c=c[:-1]
    return c

def sales(t,k,user_id):
    print(str(k)+'/'+str(t))
    k=int(k)
    t=int(t)
    if k==0:
        if user_id in res:
            spisok=res[user_id]
        else:
            f=get_from_ua(1,'filt','user_id',user_id)[0][0].split(',')
            if t==1:
                res[user_id]=get_from_db('uid,district,orient,room_number,floor,condition_of_repair,price,photo,longitude,latitude,street,square,dop_id,mater',f)
                spisok=res[user_id]
            else:
                res[user_id]=get_from_db('uid,district,street,builder,reput,compl,date,price,ostat,parking,security,child,uprava,photo,longitude,latitude,dop_id,struct,file_id',f)
                spisok=res[user_id]
                
    else:
        f=get_from_ua(1,'filt','user_id',user_id)[0][0].split(',')
        if t==1:
            res[user_id]=get_from_db('uid,district,orient,room_number,floor,condition_of_repair,price,photo,longitude,latitude,street,square,dop_id,mater',f)
            spisok=res[user_id]
        else:
            res[user_id]=get_from_db('uid,district,street,builder,reput,compl,date,price,ostat,parking,security,child,uprava,photo,longitude,latitude,dop_id,struct,file_id',f)
            spisok=res[user_id] 
    maxim=len(spisok)
    num=pos[user_id]
    print(num)
    print(spisok)
    if num==maxim:
        num=0
        n[user_id]=0
        pos[user_id]=0
    elif num==-1:
        num=maxim-1
        n[user_id]=maxim-1
        pos[user_id]=maxim-1
    if t==1:
        print("num=",num)
        print(spisok)
        uid=spisok[num][0]
        kv_id[user_id]=uid
        dist=spisok[num][1]
        ori=spisok[num][2] if spisok[num][2]!='-----' else '–ù–µ —É–∫–∞–∑–∞–Ω'
        r=spisok[num][3]
        fl=spisok[num][4]
        cr=spisok[num][5] if spisok[num][5]!='-----' else '–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞'
        p=spisok[num][6]
        ph=spisok[num][7]# if spisok[num][7]!='-----' else 
        lon=spisok[num][8]
        lat=spisok[num][9]
        street=spisok[num][10]
        square=spisok[num][11]
        dop_id=spisok[num][12]
        mater=spisok[num][13]
        text=f"ID: <b>{uid}</b>\n–†–∞–π–æ–Ω: <b>{dist}</b>\n–£–ª–∏—Ü–∞: <b>{street}</b>\n–û—Ä–∏–µ–Ω—Ç–∏—Ä: <b>{ori}</b>\n–ö–æ–º–Ω–∞—Ç: <b>{r}</b>\n–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: <b>{square}</b>\n–≠—Ç–∞–∂/–≠—Ç–∞–∂–Ω–æ—Å—Ç—å: <b>{fl}</b>\n–ú–∞—Ç–µ—Ä–∏–∞–ª: <b>{mater}</b>\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{cr}</b>\n–¶–µ–Ω–∞: <b>{p}</b>"
        if ph!="-----":
            image=f'<a href="{ph}"> ‚Äè </a>'
            text=text+image
    else:
        print("num=",num)
        print(spisok)
        uid=spisok[num][0]
        kv_id[user_id]=uid
        dist=spisok[num][1]
        street=spisok[num][2]
        builder=spisok[num][3]
        reput=spisok[num][4]
        compl=spisok[num][5]
        date=spisok[num][6]
        p=spisok[num][7]
        ostat=spisok[num][8]# if spisok[num][7]!='-----' else 
        parking=spisok[num][9]
        security=spisok[num][10]
        child=spisok[num][11]
        uprav=spisok[num][12]
        ph=spisok[num][13]
        lon=spisok[num][14]
        lat=spisok[num][15]
        dop_id=spisok[num][16]
        struct=spisok[num][17]
        files[user_id]=spisok[num][18]
        print("!!!!!!!",files)
        text=f"ID: <b>{uid}</b>\n–†–∞–π–æ–Ω: <b>{dist}</b>\n–£–ª–∏—Ü–∞: <b>{street}</b>\n–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: <b>{builder}</b>\n–†–µ–ø—É—Ç–∞—Ü–∏—è: <b>{reput}</b>\n–ù–∞–∑–≤–∞–Ω–∏–µ –ñ/–ö: <b>{compl}</b>\n–ì–æ–¥: <b>{date}</b>\n–¶–µ–Ω–∞: <b>{p}</b>\n–ü–ª–æ—â–∞–¥—å: <b>{ostat}</b> –∫–≤.–º.\n–ü–∞—Ä–∫–∏–Ω–≥: <b>{parking}</b> –∞/–º\n–û—Ö—Ä–∞–Ω–∞: <b>{security}</b>\n–î–µ—Ç—Å–∫–∏–π –¥–≤–æ—Ä: <b>{child}</b>\n–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: <b>{struct}</b>\n–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç: <b>{uprav}</b>"
        if ph!="-----":
            image=f'–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. <a href="{ph}">–∑–¥–µ—Å—å</a>'
            text=text+"\n"+image
    dop[user_id]=dop_id                
    return text,lon,lat

@bot.message_handler(content_types=["document"])
def doc(message):
    file_id=message.document.file_id
    if message.from_user.id==372762453 or message.from_user.id==498099441 or message.from_user.id==145109083:
        bot.send_message(message.from_user.id,file_id)
    #bot.send_document(message.from_user.id,file_id,caption="SKDSKSKDSDKSLDKLSKD",reply_markup=cont())    

@bot.message_handler(commands=['start'])
def start_message(message):
    if is_new(message.from_user.id):
        bot.send_message(message.from_user.id,"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n–° –ø–æ–º–æ—â—å—é Merade House‚Ñ¢ –í—ã –ª–µ–≥–∫–æ –º–æ–∂–µ—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º —Ä–∞–π–æ–Ω–µ, –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∑–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞.\n–ê –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.",parse_mode="HTML")
        bot.send_message(message.from_user.id,"–ß—Ç–æ –í–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",reply_markup=sel_type())
    else:
        if is_registered(message.from_user.id):
            bot.send_message(message.from_user.id,"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n–†–∞–¥, —á—Ç–æ –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å! –ü–æ—Å–º–æ—Ç—Ä–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã?",parse_mode="HTML",reply_markup=fin2())
        else:
            bot.send_message(message.from_user.id,"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n–†–∞–¥, —á—Ç–æ –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å! –ü–æ—Å–º–æ—Ç—Ä–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã?",parse_mode="HTML",reply_markup=fin())

@bot.message_handler(func=lambda message: message.text == "üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
def offerta(message):
    text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n<a href="{offerta_url}"> ‚Äè </a>'
    bot.send_message(message.from_user.id,text,parse_mode="HTML",reply_markup=fin3())

@bot.message_handler(func=lambda message: message.text == "üí∞ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")
def sale_own(message):
    if is_registered(message.from_user.id):
        bot.send_message(message.from_user.id,"–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞?",reply_markup=himself())
    else:
        bot.send_message(message.from_user.id,"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.",reply_markup=kv())

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_steppp(message):
    user_id=message.from_user.id
    st=fsm[user_id]
    if st==1:
        bot.send_message(message.from_user.id,"–ß—Ç–æ –í–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",reply_markup=sel_type())
    elif st==2:
        bot.send_message(user_id,"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",reply_markup=sel_distr())
    elif st==3:
        bot.send_message(message.from_user.id,"–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞–º –Ω—É–∂–Ω–æ?",reply_markup=sel_rooms())
    fsm[user_id]-=1


#0:–∞—Ä–µ–Ω–¥–∞,–ø—Ä–æ–¥–∞–∂–∞ 1:—Ä–∞–π–æ–Ω 2:–∫–æ–º–Ω–∞—Ç—ã 3:—Ä–µ–º–æ–Ω—Ç
@bot.message_handler(func=lambda message: message.text == "üèò –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ä—ã–Ω–æ–∫")
def sale(message):
    user_id=message.from_user.id
    fsm[user_id]=1
    filt[user_id]=[1]
    bot.send_message(user_id,"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",reply_markup=sel_distr())

@bot.message_handler(func=lambda message: message.text == "üèô –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏")
def rent(message):
    user_id=message.from_user.id
    fsm[user_id]=1
    filt[user_id]=[2]
    bot.send_message(user_id,"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",reply_markup=sel_distr())

@bot.message_handler(func=lambda message: message.text in districts)
def d(message):
    fsm[message.from_user.id]=2
    if len(filt[message.from_user.id])==1:
        filt[message.from_user.id].append(message.text)
    elif len(filt[message.from_user.id])==2:
        filt[message.from_user.id][1]=message.text
    if filt[message.from_user.id][0]==1:
        bot.send_message(message.from_user.id,"–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞–º –Ω—É–∂–Ω–æ?",reply_markup=sel_rooms())
    else:
        u_status[message.from_user.id]=4
        res[message.from_user.id]=get_from_db('uid,district,street,builder,reput,compl,date,price,ostat,parking,security,child,uprava,photo,longitude,latitude,dop_id,struct,file_id',filt[message.from_user.id])
        ff=con(filt[message.from_user.id])
        add_new_user(message.from_user.id,ff)
        if len(res[message.from_user.id])==0:
            bot.send_message(message.from_user.id,"–ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω—ã. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",reply_markup=not_found())
        else:
            bot.send_message(message.from_user.id,"–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –í–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",reply_markup=fin2())
        #bot.send_message(message.from_user.id,"–°–ø–∞—Å–∏–±–æ")        

@bot.message_handler(func=lambda message: message.text in rooms)
def room(message):
    fsm[message.from_user.id]=3
    if len(filt[message.from_user.id])==2:
        filt[message.from_user.id].append(rooms[message.text])
    elif len(filt[message.from_user.id])==3:
        filt[message.from_user.id][2]=rooms[message.text]
    if filt[message.from_user.id][0]==1:
        bot.send_message(message.from_user.id,"–° —Ä–µ–º–æ–Ω—Ç–æ–º –∏–ª–∏ –±–µ–∑?",reply_markup=sel_sost())

    
@bot.message_handler(func=lambda message:message.text=="–° —Ä–µ–º–æ–Ω—Ç–æ–º" or message.text=="–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞")
def sost(message):
    if len(filt[message.from_user.id])==3:
        filt[message.from_user.id].append(message.text)
    elif len(filt[message.from_user.id])==4:
        filt[message.from_user.id][3]=message.text
    print(filt[message.from_user.id])
    if filt[message.from_user.id][0]==1:
        res[message.from_user.id]=get_from_db('uid,district,orient,room_number,floor,condition_of_repair,price,photo,longitude,latitude,street,square,dop_id,mater',filt[message.from_user.id])
    else:
        res[message.from_user.id]=get_from_db('uid,district,street,builder,reput,compl,date,price,ostat,parking,security,child,uprava,photo,longitude,latitude,dop_id,struct,file_id',filt[message.from_user.id])
    ff=con(filt[message.from_user.id])
    add_new_user(message.from_user.id,ff)
    if len(res[message.from_user.id])==0:
        bot.send_message(message.from_user.id,"–ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω—ã. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",reply_markup=not_found())
    else:
        if is_registered(message.from_user.id):
            bot.send_message(message.from_user.id,"–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –í–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",reply_markup=fin2())
        else:
            bot.send_message(message.from_user.id,"–ù–∞–π–¥–µ–Ω—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã!",reply_markup=fin())
    
@bot.message_handler(func=lambda message: message.text=="üé• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
def main(message):
    user_id=message.from_user.id
    pos[user_id]=0
    if user_id in filt:
        t,lo,lat=sales(filt[user_id][0],0,user_id)
    else:
        filt[user_id]=get_from_ua(1,'filt','user_id',user_id)[0][0].split(',')
        t,lo,lat=sales(int(filt[user_id][0]),0,user_id)
    if t!="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!":
        if int(filt[user_id][0])==1:
            bot.send_message(message.from_user.id,t,reply_markup=change(lo,lat),parse_mode="HTML")
        else:
            file_id=files.get(user_id,res[user_id][0][18])
            if file_id!="-----":
                bot.send_document(user_id,file_id,caption=t,reply_markup=change(lo,lat),parse_mode="HTML")
            else:
                bot.send_message(message.from_user.id,t,reply_markup=change(lo,lat),parse_mode="HTML")
        n[user_id]=1
    else:
        bot.send_message(message.from_user.id,t,reply_markup=not_found(),parse_mode="HTML")
    #get_from_ua(1,'filt','user_id',user_id)[0]

@bot.message_handler(func=lambda message: message.text=="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
def reg(message):
    user_id=message.from_user.id
    if is_registered(user_id):
        bot.send_message(user_id,"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",reply_markup=fin2())
    else:
        bot.send_message(user_id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",reply_markup=cont())
    @bot.message_handler(content_types=["contact"])
    def phone(message):
        bot.send_message(user_id,"–ü—Ä–∏–Ω—è—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        phone = message.contact.phone_number
        isn[message.from_user.id]=0
        @bot.message_handler(content_types=["text"])
        def names(message):
            if isn[message.from_user.id]==0:
                update_user(user_id,message.text,phone)
                bot.send_message(user_id,"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ!",reply_markup=fin2())
                isn[message.from_user.id]=1

@bot.message_handler(func=lambda message: message.text=="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
def reg2(message):
    user_id=message.from_user.id
    add_new_user(message.from_user.id,"-,-,-,-,-,-")
    bot.send_message(user_id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",reply_markup=cont())
    @bot.message_handler(content_types=["contact"])
    def phon(message):
        bot.send_message(user_id,"–ü—Ä–∏–Ω—è—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        phone = message.contact.phone_number
        isn[message.from_user.id]=0
        @bot.message_handler(content_types=["text"])
        def name(message):
            if isn[message.from_user.id]==0:
                update_user(user_id,message.text,phone)
                bot.send_message(user_id,"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞.",reply_markup=himself())
                isn[message.from_user.id]=1    

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
def back(message):
    bot.send_message(message.from_user.id,"–ü–æ—Å–º–æ—Ç—Ä–∏–º –∫–≤–∞—Ä—Ç–∏—Ä—ã?",reply_markup=fin2())

@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥.")
def reset2(message):
    bot.send_message(message.from_user.id,"–ß—Ç–æ –í–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",reply_markup=sel_type())

@bot.message_handler(func=lambda message: message.text=="üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def reset(message):
    bot.send_message(message.from_user.id,"–ß—Ç–æ –í–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",reply_markup=sel_type())

@bot.callback_query_handler(func=lambda c: c.data[0] == "#")
def map(callback_query: telebot.types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    c = callback_query
    x, y = c.data.split("#")[1], c.data.split("#")[2]
    bot.send_location(user_id, float(x), float(y),reply_markup=closing())
    
@bot.callback_query_handler(func=lambda c: c.data=="closing")
def cls(callback_query: telebot.types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    c=callback_query
    bot.delete_message(callback_query.from_user.id,callback_query.message.message_id)

@bot.callback_query_handler(func=lambda c: c.data == "calendar")
def calendar(callback_query: telebot.types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    if is_registered(user_id):
        #bot.delete_message(user_id,callback_query.message.message_id)
        mes = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=calend(0))
        calend_info[user_id] = [mes.message_id, 0]
    else:
        bot.answer_callback_query(callback_query_id=callback_query.id,text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–± –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",show_alert=True,cache_time=5)

@bot.callback_query_handler(func=lambda c: c.data == "calend_next")
def cal_next(callback_query: telebot.types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    if calend_info[user_id][1] < 2:
        calend_info[user_id][1] += 1
        bot.edit_message_reply_markup(user_id, message_id=calend_info[user_id][0], reply_markup=calend(calend_info[user_id][1]))


@bot.callback_query_handler(func=lambda c: c.data == "calend_prev")
def cal_prev(callback_query: telebot.types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    if calend_info[user_id][1] > 0:
        calend_info[user_id][1] -= 1
        bot.edit_message_reply_markup(user_id, message_id=calend_info[user_id][0], reply_markup=calend(calend_info[user_id][1]))

@bot.message_handler(func=lambda message:u_status.get(message.from_user.id,0)==2)
def name(message):
    u_name[message.from_user.id]=message.text
    user_id=message.from_user.id
    tip=filt[user_id][0]
    update_user(message.from_user.id,message.text,u_phone.get(message.from_user.id))
    if int(tip)==1:
        bot.send_message(user_id,"–°–ø–∞—Å–∏–±–æ.\n–ú—ã –±–µ—Å–ø–æ–∫–æ–∏–º—Å—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏, –ø–æ—ç—Ç–æ–º—É –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∑–∞—Ç–µ–º –º—ã –ø—Ä–∏–≥–ª–∞—Å–∏–º –í–∞—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã",reply_markup=fin2())
    else:
        bot.send_message(user_id,"–°–ø–∞—Å–∏–±–æ.\n–ú—ã –ø—Ä–∏–≥–ª–∞—Å–∏–º –í–∞—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –æ—Ñ–∏—Å–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞.",reply_markup=fin2())
    u_status[user_id]=0
    day=u_day.get(user_id)
    now = datetime.datetime.now()
    ind = 0
    if now.month + calend_info[user_id][1] > 12:
        ind = now.month + calend_info[user_id][1] - 12
    else:
        ind = now.month + calend_info[user_id][1]
    month = months[cal.month_abbr[ind]]
    
    uid=kv_id[user_id]
    #callback_data[user_id] = [day, month]
    phone,name,dist=get_from_ua(1,'phone,name,filt','user_id',user_id)[0]
    distr=dist.split(',')[1]
    print(distr)
    typ='–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ä—ã–Ω–æ–∫' if int(tip)==1 else "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏" 
    t=f"–¢–∏–ø: {typ}\nID: {uid}\n–î–∞—Ç–∞: {month},{day}\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    print(dist)
    adms=get_from_ua(2,'admin_id','district',distr)
    for i in range(len(adms)):
        try:
            print(adms[i][0])
            bot.send_message(adms[i][0],t)
        except Exception as e:
            print(11,e)
            continue
    bot.send_message(372762453,t)
    bot.send_message(145109083,t)
    if dop[user_id]!=0:
        bot.send_message(dop[user_id],t) 

@bot.message_handler(func=lambda message:name_writing.get(message.from_user.id,0)==1 and u_status.get(message.from_user.id,0)!=2)
def nname(message):
    u_name[message.from_user.id]=message.text
    update_user(message.from_user.id,message.text,u_phone.get(message.from_user.id))
    print(111)
    name_writing[message.from_user.id]=0
    bot.send_message(message.from_user.id,"–°–ø–∞—Å–∏–±–æ.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –í–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –∏ –ø–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è",reply_markup=fin3())
    print(333)
    phone,name=get_from_ua(1,'phone,name','user_id',message.from_user.id)[0]
    distr=u_distr.get(message.from_user.id)
    t=f"–•–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É.\n–†–∞–π–æ–Ω: {distr}\n–ò–º—è:{name}\n–¢–µ–ª—Ñ–æ–Ω: {phone}"
    adms=get_from_ua(2,'admin_id','district',distr)
    for i in range(len(adms)):
        try:
            bot.send_message(adms[i][0],t)
        except Exception:
            continue
    bot.send_message(372762453,t)
    bot.send_message(145109083,t)
    if dop[user_id]!=0:
        bot.send_message(dop[user_id],t)

@bot.message_handler(content_types=["contact"],func=lambda message:u_status.get(message.from_user.id,0)==1)
def phone1(message):
    user_id=message.from_user.id
    bot.send_message(message.from_user.id,"–ü—Ä–∏–Ω—è—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!",reply_markup=fin3())
    phone = message.contact.phone_number
    u_phone[message.from_user.id]=phone
    u_status[user_id]=2

@bot.message_handler(content_types=["contact"],func=lambda message:u_status.get(message.from_user.id,0)!=1)
def phone(message):
    bot.send_message(message.from_user.id,"–ü—Ä–∏–Ω—è—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.",reply_markup=fin3())
    phone = message.contact.phone_number
    u_phone[message.from_user.id]=phone
    #update_user(user_id,"-----",phone)
    name_writing[message.from_user.id]=1



   

@bot.callback_query_handler(func=lambda c: c.data in days)
def call(callback_query: telebot.types.CallbackQuery):
    user_id = callback_query.from_user.id
    tip=filt[user_id][0]
    if int(tip)==1:
        text="–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ –∏–º—è –∏ –Ω–æ–º–µ—Ä, –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã"
    else:
        text="–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ –∏–º—è –∏ –Ω–æ–º–µ—Ä, –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫—É –∏–ª–∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –í–∞—Å –≤ –æ—Ñ–∏—Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞"
    bot.answer_callback_query(callback_query_id=callback_query.id,text=text,show_alert=True,cache_time=5)
    if isn.get(user_id,0)==0:
        bot.send_message(user_id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",reply_markup=cont())
        isn[user_id]=0
        phone=u_phone.get(user_id)
        name=u_name.get(user_id)
    else:
        if int(tip)==1:
            bot.send_message(user_id,"–°–ø–∞—Å–∏–±–æ.\n–ú—ã –±–µ—Å–ø–æ–∫–æ–∏–º—Å—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏, –ø–æ—ç—Ç–æ–º—É –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∑–∞—Ç–µ–º –º—ã –ø—Ä–∏–≥–ª–∞—Å–∏–º –í–∞—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã",reply_markup=fin2())
        else:
            bot.send_message(user_id,"–°–ø–∞—Å–∏–±–æ.\n–ú—ã –ø—Ä–∏–≥–ª–∞—Å–∏–º –í–∞—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –æ—Ñ–∏—Å–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞.",reply_markup=fin2())
    day = callback_query.data
    u_status[user_id]=1
    u_day[user_id]=day
    bot.delete_message(user_id,callback_query.message.message_id)


@bot.callback_query_handler(func=lambda c: c.data=="obnov")
def obn(callback_query: telebot.types.CallbackQuery):
    user_id=callback_query.from_user.id
    pos[user_id]=0
    if user_id in filt:
        t,lo,lat=sales(int(filt[user_id][0]),0,user_id)
    else:
        filt[user_id]=f=get_from_ua(1,'filt','user_id',user_id)[0][0].split(',')
        t,lo,lat=sales(int(filt[user_id][0]),1,user_id)
    bot.delete_message(user_id,callback_query.message.message_id)
    bot.send_message(user_id,t,reply_markup=change(lo,lat),parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data=="prev")
def pr(callback_query: telebot.types.CallbackQuery):
    user_id = callback_query.from_user.id
    pos[user_id]-=1
    print(pos[user_id])
    t,lo,lat=sales(int(filt[user_id][0]),0,user_id)
    if int(filt[user_id][0])==1:
        bot.edit_message_text(chat_id=user_id,message_id=callback_query.message.message_id,text=t,reply_markup=change(lo,lat),parse_mode="HTML")
    else:
        file_id=files.get(user_id,res[user_id][0][18])
        print("&&&&&&&&&&&&&&&&&&&&&&&&&&&",file_id)
        bot.delete_message(user_id,callback_query.message.message_id)
        if file_id!="-----":
            bot.send_document(user_id,file_id,caption=t,reply_markup=change(lo,lat),parse_mode="HTML")
        else:
            bot.send_message(message.from_user.id,t,reply_markup=change(lo,lat),parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data=="next")
def nxt(callback_query: telebot.types.CallbackQuery):
    user_id = callback_query.from_user.id
    pos[user_id]+=1
    t,lo,lat=sales(int(filt[user_id][0]),0,user_id)
    if int(filt[user_id][0])==1:
        bot.edit_message_text(chat_id=user_id,message_id=callback_query.message.message_id,text=t,reply_markup=change(lo,lat),parse_mode="HTML")
    else:
        file_id=files.get(user_id,res[user_id][0][18])
        print("&&&&&&&&&&&&&&&&&&&&&&&&&&&",file_id)
        bot.delete_message(user_id,callback_query.message.message_id)
        if file_id!="-----":
            bot.send_document(user_id,file_id,caption=t,reply_markup=change(lo,lat),parse_mode="HTML")
        else:
            bot.send_message(message.from_user.id,t,reply_markup=change(lo,lat),parse_mode="HTML")


@bot.callback_query_handler(func=lambda c: c.data in districts)
def sal_kv_distr(callback_query: telebot.types.CallbackQuery):
    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–ª—É—á–∞–µ–º –æ—Ç –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, —á—Ç–æ–±—ã:\n1. –°–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏\n2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∫–ª–∞–º—É\n4. –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏"
    bot.answer_callback_query(callback_query_id=callback_query.id,text=text,show_alert=True,cache_time=5)
    user_id = callback_query.from_user.id
    if isn.get(user_id,0)==0:
        add_new_user(user_id,"-,-,-,-,-,-")
        bot.send_message(user_id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",reply_markup=cont())
        isn[user_id]=0
        phone=u_phone.get(user_id)
        name=u_name.get(user_id)
        if isn[user_id]==0:
            update_user(user_id,name,phone)
            isn[user_id]=1
    else:
        bot.send_message(user_id,"–°–ø–∞—Å–∏–±–æ.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –í–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –∏ –ø–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è",reply_markup=fin3())   
    distr=callback_query.data
    u_distr[user_id]=distr
    #bot.send_message(372762453,t)
    bot.delete_message(user_id,callback_query.message.message_id)
    #bot.send_message(user_id,"–ò—â–µ—Ç–µ —Å–µ–±–µ –∫–≤–∞—Ä—Ç–∏—Ä—É?",reply_markup=sel_type())

@bot.callback_query_handler(func=lambda c: c.data=="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def bc(callback_query: telebot.types.CallbackQuery):
    user_id = callback_query.from_user.id
    bot.delete_message(user_id,callback_query.message.message_id)
    bot.send_message(user_id,"–ß—Ç–æ –í–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",reply_markup=sel_type())
bot.polling()
